import { Component, ElementRef, ViewChild, AfterViewInit, OnDestroy, HostListener } from '@angular/core';
import { Openf1ApiService } from '../../services/openf1-api.service';
import { AnimationControlService } from '../../services/animation-control.service';
import { Subscription, forkJoin, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';

const CAR_SVG = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="512" height="512">
<path d="M0 0 C1.11181641 -0.04511719 2.22363281 -0.09023437 3.36914062 -0.13671875 C9.19265976 -0.18498948 12.95089356 0.08698207 17.453125 3.984375 C18.6075763 5.16499303 19.73167031 6.37663149 20.8125 7.625 C24.83997758 12.14363338 26.82875753 12.96013973 32.8125 13.625 C34.49609375 14.68359375 34.49609375 14.68359375 35.8125 16.625 C36.13882361 19.20913022 36.27719974 21.48347049 36.25 24.0625 C36.27900391 26.04056641 36.27900391 26.04056641 36.30859375 28.05859375 C35.8125 31.625 35.8125 31.625 34.23046875 34.05859375 C30.97801855 36.16559299 28.5383488 36.16156715 24.6875 36.25 C19.69207674 36.07342403 19.69207674 36.07342403 15.8125 38.625 C15.8125 39.945 15.8125 41.265 15.8125 42.625 C23.83665285 42.04735327 31.55961375 40.56489376 39.421875 38.90234375 C41.38524798 38.49735516 43.34862467 38.09238373 45.31219864 37.6883707 C50.10068163 36.70195238 54.88709111 35.70587001 59.67089844 34.69702148 C62.36844996 34.12862049 65.06738281 33.56781556 67.76812744 33.01478577 C70.29272353 32.49745455 72.81518523 31.96954593 75.3348999 31.42893982 C86.46444923 29.17025647 98.82215023 27.03311258 108.8125 33.625 C113.38258126 37.20257336 117.48388581 41.25330543 121.50390625 45.4296875 C122.70370117 46.67492187 122.70370117 46.67492187 123.92773438 47.9453125 C125.5728481 49.66263792 127.20815601 51.38940562 128.83398438 53.125 C133.52262681 58.00082524 133.52262681 58.00082524 139.5546875 60.8125 C142.90901601 60.61944512 145.28845279 60.0529093 148.375 58.75 C159.50256769 54.35354955 169.50119238 55.01790431 180.8125 58.625 C191.19357797 63.31181579 199.28475913 71.13283126 203.8125 81.625 C203.8125 82.285 203.8125 82.945 203.8125 83.625 C204.97652344 83.82996094 206.14054687 84.03492188 207.33984375 84.24609375 C211.72500938 85.21384856 215.79018264 86.73009481 219.94140625 88.41015625 C238.58899398 95.80336278 254.89473876 98.94717389 275.01196289 98.52758789 C275.83789948 98.51417862 276.66383606 98.50076935 277.51480103 98.48695374 C279.06201379 98.45490595 280.60899204 98.40241318 282.15463257 98.32566833 C285.60136432 98.23297036 287.44496419 98.35787026 290.27368164 100.41381836 C292.53507917 103.66329915 292.34310738 106.27358135 292.3125 110.1875 C292.32796875 110.85974609 292.3434375 111.53199219 292.359375 112.22460938 C292.32051485 117.11613074 292.32051485 117.11613074 290.125 119.31533813 C287.30391362 120.91303295 285.51387105 121.00526116 282.28125 121.01318359 C281.17330078 121.02264008 280.06535156 121.03209656 278.92382812 121.0418396 C277.1362207 121.03273056 277.1362207 121.03273056 275.3125 121.0234375 C273.47075195 121.02774277 273.47075195 121.02774277 271.59179688 121.03213501 C268.99608906 121.03417631 266.40036588 121.02864193 263.8046875 121.01611328 C259.82777565 121.00006166 255.85188018 121.01596091 251.875 121.03515625 C249.35416442 121.03317383 246.83332947 121.02933019 244.3125 121.0234375 C243.12076172 121.02951019 241.92902344 121.03558289 240.70117188 121.0418396 C239.03924805 121.02765488 239.03924805 121.02765488 237.34375 121.01318359 C236.36986328 121.01079681 235.39597656 121.00841003 234.39257812 121.00595093 C231.3050636 120.55007655 229.97108209 119.8734079 227.8125 117.625 C227.4825 115.975 227.1525 114.325 226.8125 112.625 C220.2125 111.305 213.6125 109.985 206.8125 108.625 C206.11125 110.44 205.41 112.255 204.6875 114.125 C199.91453994 125.50256025 192.09523749 134.35690504 180.7734375 139.6171875 C168.93383572 143.64702557 156.1672466 143.69629972 144.6875 138.5625 C134.38978671 132.90041327 127.98901551 124.97803102 122.8125 114.625 C121.08232492 115.07951184 119.35340123 115.53878857 117.625 116 C116.66207031 116.25523437 115.69914062 116.51046875 114.70703125 116.7734375 C109.31166479 118.10428882 109.31166479 118.10428882 105.37109375 121.68359375 C105.00113281 122.46863281 104.63117188 123.25367188 104.25 124.0625 C102.55207194 127.62873644 101.29957643 129.67754389 97.8125 131.625 C94.81345803 132.0668769 91.83872798 132.0147583 88.81221008 131.98335266 C87.89225964 131.98576609 86.9723092 131.98817953 86.02448148 131.99066609 C82.93452273 131.99527738 79.84504019 131.97857849 76.75512695 131.9621582 C74.54256701 131.96135208 72.33000618 131.96194545 70.1174469 131.96383667 C65.34837851 131.96539959 60.57943632 131.95799522 55.81038857 131.94399452 C48.26744139 131.92288947 40.72464915 131.92761445 33.1816864 131.9370575 C22.60362082 131.94834635 12.02557922 131.95348007 1.44750977 131.94897461 C0.77625363 131.94869486 0.10499749 131.9484151 -0.58659974 131.94812687 C-10.10479544 131.9437415 -19.62295796 131.93043723 -29.14113859 131.91351613 C-29.81087877 131.9123268 -30.48061896 131.91113748 -31.1706543 131.90991211 C-31.83957577 131.90871852 -32.50849725 131.90752492 -33.19768908 131.90629516 C-44.36581145 131.88696813 -55.53381381 131.89113429 -66.70193702 131.91344708 C-74.19785223 131.92712405 -81.69308836 131.91394499 -89.18893564 131.88084948 C-93.85805825 131.86649218 -98.52687727 131.87715882 -103.19597816 131.89483261 C-105.35787583 131.89800629 -107.51981703 131.89094232 -109.68164062 131.87276649 C-112.63931938 131.84937558 -115.59465746 131.8630829 -118.55229187 131.88569641 C-119.82790726 131.86224772 -119.82790726 131.86224772 -121.12929267 131.83832532 C-127.01817063 131.93794977 -130.45466174 133.61387355 -135.13634521 137.16148919 C-143.31510328 142.99708039 -154.7130435 143.29389337 -164.3125 142 C-175.78194524 139.71507146 -184.54280356 133.43074997 -191.97265625 124.47265625 C-193.1875 122.625 -193.1875 122.625 -193.1875 120.625 C-193.86329102 120.64071045 -194.53908203 120.6564209 -195.23535156 120.67260742 C-198.30264897 120.73503867 -201.36981259 120.77401647 -204.4375 120.8125 C-206.03271484 120.85020508 -206.03271484 120.85020508 -207.66015625 120.88867188 C-208.68496094 120.89833984 -209.70976562 120.90800781 -210.765625 120.91796875 C-212.17956543 120.94153442 -212.17956543 120.94153442 -213.62207031 120.96557617 C-216.67664189 120.56006348 -218.01996874 119.79502985 -220.1875 117.625 C-220.59752192 114.97493187 -220.74823204 112.82681312 -220.6875 110.1875 C-220.6978125 108.86878906 -220.708125 107.55007813 -220.71875 106.19140625 C-220.1875 102.625 -220.1875 102.625 -218.703125 100.16796875 C-214.9819176 97.88555117 -211.70883812 98.19082953 -207.4375 98.375 C-206.24833984 98.40207031 -206.24833984 98.40207031 -205.03515625 98.4296875 C-203.08541652 98.47666918 -201.13630122 98.54840956 -199.1875 98.625 C-199.1875 95.655 -199.1875 92.685 -199.1875 89.625 C-199.75259277 89.33254395 -200.31768555 89.04008789 -200.89990234 88.73876953 C-203.45613666 87.4130615 -206.00933447 86.08160789 -208.5625 84.75 C-209.45195312 84.28980469 -210.34140625 83.82960938 -211.2578125 83.35546875 C-212.10859375 82.91074219 -212.959375 82.46601563 -213.8359375 82.0078125 C-214.62145996 81.59934082 -215.40698242 81.19086914 -216.21630859 80.77001953 C-218.1875 79.625 -218.1875 79.625 -220.1875 77.625 C-220.39986892 74.64711584 -220.49145649 71.76463953 -220.48828125 68.78515625 C-220.49256638 67.90725937 -220.4968515 67.02936249 -220.50126648 66.12486267 C-220.507015 64.26627465 -220.50750621 62.40766413 -220.50317383 60.54907227 C-220.50001636 57.70224668 -220.52345737 54.85646243 -220.54882812 52.00976562 C-220.55110128 50.20573048 -220.55180454 48.40169254 -220.55078125 46.59765625 C-220.559991 45.74446304 -220.56920074 44.89126984 -220.57868958 44.01222229 C-220.53257415 38.13267284 -220.53257415 38.13267284 -219.01530457 35.90046692 C-216.46881266 34.12349019 -214.66235346 34.24408985 -211.5703125 34.23681641 C-210.41901855 34.22735992 -209.26772461 34.21790344 -208.08154297 34.2081604 C-206.83775879 34.21423309 -205.59397461 34.22030579 -204.3125 34.2265625 C-202.39848389 34.22225723 -202.39848389 34.22225723 -200.44580078 34.21786499 C-197.74545884 34.21582165 -195.04592919 34.21986608 -192.34570312 34.23388672 C-188.8853077 34.25097911 -185.42561029 34.24113693 -181.96524048 34.22316933 C-178.66430194 34.20971984 -175.36344764 34.21913756 -172.0625 34.2265625 C-170.19682373 34.21745346 -170.19682373 34.21745346 -168.29345703 34.2081604 C-166.56651611 34.22234512 -166.56651611 34.22234512 -164.8046875 34.23681641 C-163.79003418 34.23920319 -162.77538086 34.24158997 -161.72998047 34.24404907 C-159.1875 34.625 -159.1875 34.625 -157.35771179 36.02470398 C-155.84476504 38.09369925 -155.84036978 39.3098798 -155.89453125 41.85546875 C-155.90419922 42.65791016 -155.91386719 43.46035156 -155.92382812 44.28710938 C-155.94896484 45.12048828 -155.97410156 45.95386719 -156 46.8125 C-156.02030273 48.0799707 -156.02030273 48.0799707 -156.04101562 49.37304688 C-156.07634201 51.45730384 -156.13014861 53.54123277 -156.1875 55.625 C-155.20463013 55.67877808 -155.20463013 55.67877808 -154.2019043 55.73364258 C-147.3398393 56.15050709 -141.52327649 58.03528147 -135.1875 60.625 C-135.24550781 59.80515625 -135.30351562 58.9853125 -135.36328125 58.140625 C-135.43095703 56.52414063 -135.43095703 56.52414063 -135.5 54.875 C-135.55800781 53.80765625 -135.61601562 52.7403125 -135.67578125 51.640625 C-135.1875 48.625 -135.1875 48.625 -133.2578125 46.26953125 C-129.03239274 44.00629751 -125.47211658 44.07847558 -120.75 44.0625 C-102.42441605 43.55165921 -87.42867376 38.48770478 -71.91552734 28.79077148 C-53.58110143 17.33708394 -37.06970828 13.05567105 -15.6875 12.875 C-13.9778357 12.84674914 -12.26819844 12.81680955 -10.55859375 12.78515625 C-6.43494643 12.71239081 -2.31161542 12.66216574 1.8125 12.625 C-0.36030145 10.17881855 -0.93644597 9.66595651 -4.32421875 9.11328125 C-6.08185547 9.02626953 -6.08185547 9.02626953 -7.875 8.9375 C-9.05449219 8.87175781 -10.23398438 8.80601562 -11.44921875 8.73828125 C-12.80466797 8.68220703 -12.80466797 8.68220703 -14.1875 8.625 C-14.875 6.3125 -14.875 6.3125 -15.1875 3.625 C-11.75649535 -1.3025145 -5.38560565 0.03068721 0 0 Z M77.09375 46.8125 C75.99526733 47.03446045 74.89678467 47.2564209 73.76501465 47.48510742 C70.27932309 48.19115509 66.79593426 48.90790729 63.3125 49.625 C60.94024847 50.10748086 58.56785395 50.58925927 56.1953125 51.0703125 C50.39936175 52.2470818 44.60526069 53.43263216 38.8125 54.625 C38.8125 54.955 38.8125 55.285 38.8125 55.625 C61.9125 55.625 85.0125 55.625 108.8125 55.625 C103.44932558 49.01365712 103.44932558 49.01365712 96.8125 44.625 C90.00048044 44.16394961 83.74627697 45.42979296 77.09375 46.8125 Z " fill="#E43834" transform="translate(220.1875,184.375)"/>
<path d="M0 0 C1.15129395 -0.00945648 2.30258789 -0.01891296 3.48876953 -0.02865601 C5.3544458 -0.01954697 5.3544458 -0.01954697 7.2578125 -0.01025391 C9.17182861 -0.01455917 9.17182861 -0.01455917 11.12451172 -0.01895142 C13.82485366 -0.02099475 16.52438331 -0.01695032 19.22460938 -0.00292969 C22.6850048 0.0141627 26.14470221 0.00432052 29.60507202 -0.01364708 C32.90601056 -0.02709657 36.20686486 -0.01767885 39.5078125 -0.01025391 C40.75159668 -0.0163266 41.99538086 -0.02239929 43.27685547 -0.02865601 C45.00379639 -0.01447128 45.00379639 -0.01447128 46.765625 0 C47.78027832 0.00238678 48.79493164 0.00477356 49.84033203 0.00723267 C52.3828125 0.38818359 52.3828125 0.38818359 54.21260071 1.78788757 C55.72554746 3.85688284 55.72994272 5.07306339 55.67578125 7.61865234 C55.66611328 8.42109375 55.65644531 9.22353516 55.64648438 10.05029297 C55.62134766 10.88367188 55.59621094 11.71705078 55.5703125 12.57568359 C55.55000977 13.8431543 55.55000977 13.8431543 55.52929688 15.13623047 C55.49397049 17.22048744 55.44016389 19.30441636 55.3828125 21.38818359 C56.03805908 21.42403564 56.69330566 21.4598877 57.3684082 21.49682617 C64.2304732 21.91369068 70.04703601 23.79846507 76.3828125 26.38818359 C76.3828125 27.04818359 76.3828125 27.70818359 76.3828125 28.38818359 C77.11628906 28.63826172 77.84976563 28.88833984 78.60546875 29.14599609 C87.65539211 33.19364114 92.97111465 42.47763156 96.3828125 51.38818359 C96.3828125 52.37818359 96.3828125 53.36818359 96.3828125 54.38818359 C97.44081055 54.36199951 98.49880859 54.33581543 99.58886719 54.30883789 C103.56960322 54.21732836 107.55024939 54.16057456 111.53173828 54.11352539 C113.24446319 54.08860777 114.95708431 54.0546603 116.66943359 54.01098633 C128.56882962 53.71541395 139.02795441 54.04678838 148.7578125 61.88818359 C150.5078125 63.55485026 152.2578125 65.22151693 154.0078125 66.88818359 C162.67366165 73.9797776 172.66407329 75.12465632 183.46484375 74.98193359 C184.80832308 74.98021243 186.15180575 74.9802983 187.49528503 74.98205566 C190.30683791 74.98041217 193.11758447 74.96194133 195.92895508 74.93017578 C199.42903186 74.89122278 202.9280331 74.88633282 206.42828369 74.8932457 C240.88008781 74.93911341 275.22589732 71.88161485 308.25341797 61.53564453 C313.74667309 59.86557765 317.78218735 58.81581557 323.3828125 60.38818359 C325.3828125 62.38818359 325.3828125 62.38818359 325.8828125 65.26318359 C325.76060761 70.16156313 323.22720474 74.08724462 320.96875 78.31787109 C319.52276763 81.11723599 318.35791067 83.8774205 317.2578125 86.82568359 C315.57271088 91.19290529 313.74671688 95.20623141 309.3828125 97.38818359 C306.45501757 97.48334838 303.55100749 97.51654096 300.62303162 97.50602722 C299.24566923 97.5070841 299.24566923 97.5070841 297.84048134 97.50816232 C294.74446585 97.5094772 291.64850057 97.503784 288.55249023 97.49829102 C286.34022522 97.49804901 284.12796009 97.49832569 281.91569519 97.49908447 C277.14118036 97.50019289 272.36667512 97.49875233 267.59216118 97.495718 C260.04099897 97.49209355 252.48988713 97.50120829 244.93873596 97.51350403 C243.66535211 97.51552596 242.39196825 97.51754789 241.079997 97.51963109 C238.47549369 97.5238 235.87099044 97.52800276 233.26648724 97.5322386 C226.56722644 97.54296777 219.86796523 97.55284741 213.16870117 97.5612793 C212.49631403 97.56213055 211.82392689 97.5629818 211.13116438 97.56385884 C200.24771634 97.57706436 189.36434166 97.57207005 178.48089444 97.56120773 C167.30377357 97.55056624 156.12680389 97.56320808 144.94971615 97.59529001 C138.6755196 97.61244959 132.40172941 97.61872707 126.12753105 97.59917259 C120.22174166 97.58093441 114.31665175 97.59057368 108.4109211 97.62142944 C106.2458156 97.62779191 104.08065184 97.62395029 101.91558838 97.60903358 C98.95338323 97.5901435 95.99356998 97.60830999 93.03147888 97.63542175 C91.75381713 97.61401942 91.75381713 97.61401942 90.45034403 97.59218472 C84.55964948 97.70072453 81.11723392 99.37616942 76.43349415 102.92514592 C68.2546813 108.76023559 56.85706102 109.05704893 47.2578125 107.76318359 C35.78836726 105.47825505 27.02750894 99.19393357 19.59765625 90.23583984 C18.3828125 88.38818359 18.3828125 88.38818359 18.3828125 86.38818359 C17.70702148 86.40389404 17.03123047 86.41960449 16.33496094 86.43579102 C13.26766353 86.49822227 10.20049991 86.53720006 7.1328125 86.57568359 C5.53759766 86.61338867 5.53759766 86.61338867 3.91015625 86.65185547 C2.88535156 86.66152344 1.86054688 86.67119141 0.8046875 86.68115234 C-0.60925293 86.70471802 -0.60925293 86.70471802 -2.05175781 86.72875977 C-5.10632939 86.32324707 -6.44965624 85.55821344 -8.6171875 83.38818359 C-9.02720942 80.73811546 -9.17791954 78.58999671 -9.1171875 75.95068359 C-9.1275 74.63197266 -9.1378125 73.31326172 -9.1484375 71.95458984 C-8.6171875 68.38818359 -8.6171875 68.38818359 -7.1328125 65.93115234 C-3.4116051 63.64873476 -0.13852562 63.95401313 4.1328125 64.13818359 C4.92558594 64.15623047 5.71835938 64.17427734 6.53515625 64.19287109 C8.48489598 64.23985277 10.43401128 64.31159315 12.3828125 64.38818359 C12.3828125 61.41818359 12.3828125 58.44818359 12.3828125 55.38818359 C11.53517334 54.94949951 11.53517334 54.94949951 10.67041016 54.50195312 C8.11417584 53.1762451 5.56097803 51.84479148 3.0078125 50.51318359 C2.11835938 50.05298828 1.22890625 49.59279297 0.3125 49.11865234 C-0.96367188 48.4515625 -0.96367188 48.4515625 -2.265625 47.77099609 C-3.44390869 47.15828857 -3.44390869 47.15828857 -4.64599609 46.53320312 C-6.6171875 45.38818359 -6.6171875 45.38818359 -8.6171875 43.38818359 C-8.82955642 40.41029944 -8.92114399 37.52782312 -8.91796875 34.54833984 C-8.92225388 33.67044296 -8.926539 32.79254608 -8.93095398 31.88804626 C-8.9367025 30.02945824 -8.93719371 28.17084772 -8.93286133 26.31225586 C-8.92970386 23.46543027 -8.95314487 20.61964602 -8.97851562 17.77294922 C-8.98078878 15.96891408 -8.98149204 14.16487613 -8.98046875 12.36083984 C-8.9896785 11.50764664 -8.99888824 10.65445343 -9.00837708 9.77540588 C-8.96226165 3.89585643 -8.96226165 3.89585643 -7.44499207 1.66365051 C-4.89850016 -0.11332622 -3.09204096 0.00727344 0 0 Z " fill="#222120" transform="translate(8.6171875,218.61181640625)"/>
<path d="M0 0 C4.70385792 4.40547887 8.22022828 9.21376216 10.78125 15.1484375 C10.78125 15.8084375 10.78125 16.4684375 10.78125 17.1484375 C11.94527344 17.35339844 13.10929687 17.55835938 14.30859375 17.76953125 C18.69375938 18.73728606 22.75893264 20.25353231 26.91015625 21.93359375 C45.55774398 29.32680028 61.86348876 32.47061139 81.98071289 32.05102539 C82.80664948 32.03761612 83.63258606 32.02420685 84.48355103 32.01039124 C86.03076379 31.97834345 87.57774204 31.92585068 89.12338257 31.84910583 C92.57011432 31.75640786 94.41371419 31.88130776 97.24243164 33.93725586 C99.50382917 37.18673665 99.31185738 39.79701885 99.28125 43.7109375 C99.30445313 44.71930664 99.30445313 44.71930664 99.328125 45.74804688 C99.28926485 50.63956824 99.28926485 50.63956824 97.09375 52.83877563 C94.27266362 54.43647045 92.48262105 54.52869866 89.25 54.53662109 C88.14205078 54.54607758 87.03410156 54.55553406 85.89257812 54.5652771 C84.1049707 54.55616806 84.1049707 54.55616806 82.28125 54.546875 C81.05341797 54.54974518 79.82558594 54.55261536 78.56054688 54.55557251 C75.96483906 54.55761381 73.36911588 54.55207943 70.7734375 54.53955078 C66.79652565 54.52349916 62.82063018 54.53939841 58.84375 54.55859375 C56.32291442 54.55661133 53.80207947 54.55276769 51.28125 54.546875 C50.08951172 54.55294769 48.89777344 54.55902039 47.66992188 54.5652771 C46.00799805 54.55109238 46.00799805 54.55109238 44.3125 54.53662109 C43.33861328 54.53423431 42.36472656 54.53184753 41.36132812 54.52938843 C38.2738136 54.07351405 36.93983209 53.3968454 34.78125 51.1484375 C34.45125 49.4984375 34.12125 47.8484375 33.78125 46.1484375 C23.88125 44.1684375 23.88125 44.1684375 13.78125 42.1484375 C13.08 43.9634375 12.37875 45.7784375 11.65625 47.6484375 C6.88328994 59.02599775 -0.93601251 67.88034254 -12.2578125 73.140625 C-24.09741428 77.17046307 -36.8640034 77.21973722 -48.34375 72.0859375 C-58.66309729 66.41195555 -66.38370737 58.10421456 -70.34765625 46.98046875 C-72.8141399 36.1301528 -72.96635241 22.77894539 -67.90234375 12.72265625 C-64.82946541 8.02421813 -61.23533642 4.05345208 -57.21875 0.1484375 C-56.64125 -0.4496875 -56.06375 -1.0478125 -55.46875 -1.6640625 C-40.27877266 -16.26980994 -14.9771558 -12.49854199 0 0 Z " fill="#232220" transform="translate(413.21875,250.8515625)"/>
<path d="M0 0 C7.23271541 4.56446647 11.30016526 11.67314794 14.375 19.5 C16.2615156 30.06448739 14.72318311 39.18599463 8.875 48.25 C3.43850736 55.52530632 -4.0484227 60.28677946 -13 62 C-23.61286921 63.02292715 -32.14313667 61.01559927 -40.859375 54.859375 C-47.87497082 48.7655363 -52.21834764 40.55610916 -53.3125 31.37890625 C-53.77124042 21.27228144 -50.44140183 12.73026228 -43.9921875 5.0078125 C-31.84179811 -7.23787406 -14.78884778 -8.42204775 0 0 Z " fill="#626260" transform="translate(403,255)"/>
<path d="M0 0 C7.23271541 4.56446647 11.30016526 11.67314794 14.375 19.5 C16.26151561 30.06448739 14.72318311 39.18599463 8.875 48.25 C3.43850736 55.52530632 -4.0484227 60.28677946 -13 62 C-23.61286921 63.02292715 -32.14313667 61.01559927 -40.859375 54.859375 C-47.87497082 48.7655363 -52.21834764 40.55610916 -53.3125 31.37890625 C-53.77124042 21.27228144 -50.44140183 12.73026228 -43.9921875 5.0078125 C-31.84179811 -7.23787406 -14.78884778 -8.42204775 0 0 Z " fill="#626260" transform="translate(83,255)"/>
<path d="M0 0 C1.15129395 -0.00945648 2.30258789 -0.01891296 3.48876953 -0.02865601 C5.3544458 -0.01954697 5.3544458 -0.01954697 7.2578125 -0.01025391 C9.17182861 -0.01455917 9.17182861 -0.01455917 11.12451172 -0.01895142 C13.82485366 -0.02099475 16.52438331 -0.01695032 19.22460938 -0.00292969 C22.6850048 0.0141627 26.14470221 0.00432052 29.60507202 -0.01364708 C32.90601056 -0.02709657 36.20686486 -0.01767885 39.5078125 -0.01025391 C40.75159668 -0.0163266 41.99538086 -0.02239929 43.27685547 -0.02865601 C45.00379639 -0.01447128 45.00379639 -0.01447128 46.765625 0 C47.78027832 0.00238678 48.79493164 0.00477356 49.84033203 0.00723267 C52.3828125 0.38818359 52.3828125 0.38818359 54.21260071 1.78215027 C55.76124305 3.90755289 55.72837407 5.22529217 55.67578125 7.83740234 C55.66611328 8.68496094 55.65644531 9.53251953 55.64648438 10.40576172 C55.62134766 11.28683594 55.59621094 12.16791016 55.5703125 13.07568359 C55.55000977 14.41469727 55.55000977 14.41469727 55.52929688 15.78076172 C55.49395329 17.98384525 55.44461743 20.18570942 55.3828125 22.38818359 C54.80345947 22.43499268 54.22410645 22.48180176 53.62719727 22.5300293 C40.43351362 23.76510733 29.59109033 29.89212836 21.05859375 39.95458984 C17.77582212 44.72187825 15.59936878 50.06195312 13.3828125 55.38818359 C10.27363954 53.96133764 7.17145197 52.51989656 4.0703125 51.07568359 C2.74870117 50.46950195 2.74870117 50.46950195 1.40039062 49.85107422 C0.12905273 49.25649414 0.12905273 49.25649414 -1.16796875 48.64990234 C-1.94825439 48.28856201 -2.72854004 47.92722168 -3.5324707 47.55493164 C-5.70132388 46.34109521 -7.03050507 45.29461671 -8.6171875 43.38818359 C-8.91566743 40.33955835 -9.03740595 37.49958264 -9.015625 34.45068359 C-9.01849518 33.57420166 -9.02136536 32.69771973 -9.02432251 31.79467773 C-9.02636348 29.94205072 -9.02083128 28.08940217 -9.00830078 26.23681641 C-8.99224734 23.39876181 -9.00814805 20.56213133 -9.02734375 17.72412109 C-9.02536132 15.92463878 -9.02151766 14.12515735 -9.015625 12.32568359 C-9.02169769 11.47562744 -9.02777039 10.62557129 -9.0340271 9.74975586 C-8.96405907 3.89777613 -8.96405907 3.89777613 -7.44400024 1.66464233 C-4.89831615 -0.11411727 -3.09229814 0.00727405 0 0 Z " fill="#E43834" transform="translate(8.6171875,218.61181640625)"/>
<path d="M0 0 C7.23271541 4.56446647 11.30016526 11.67314794 14.375 19.5 C16.2615156 30.06448739 14.72318311 39.18599463 8.875 48.25 C3.43850736 55.52530632 -4.0484227 60.28677946 -13 62 C-23.61286921 63.02292715 -32.14313667 61.01559927 -40.859375 54.859375 C-47.87497082 48.7655363 -52.21834764 40.55610916 -53.3125 31.37890625 C-53.77124042 21.27228144 -50.44140183 12.73026228 -43.9921875 5.0078125 C-31.84179811 -7.23787406 -14.78884778 -8.42204775 0 0 Z M-41.61328125 12.86328125 C-46.15524007 19.6570281 -45.90941269 27.10698416 -45 35 C-43.14636144 42.58901435 -38.4532245 48.15465051 -31.93359375 52.3203125 C-25.24706014 55.7413297 -18.58033061 56.13003777 -11.32421875 54.33984375 C-3.62019221 51.63934279 1.63248188 47.10055705 5.4375 39.875 C8.20112763 32.90636998 8.1785311 24.66059331 5.8125 17.5625 C1.4688809 9.02504176 -3.95359662 5.2182193 -13 2 C-24.20917594 0.17144743 -34.24041299 4.34788619 -41.61328125 12.86328125 Z " fill="#F6F602" transform="translate(403,255)"/>
<path d="M0 0 C7.23271541 4.56446647 11.30016526 11.67314794 14.375 19.5 C16.26151561 30.06448739 14.72318311 39.18599463 8.875 48.25 C3.43850736 55.52530632 -4.0484227 60.28677946 -13 62 C-23.61286921 63.02292715 -32.14313667 61.01559927 -40.859375 54.859375 C-47.87497082 48.7655363 -52.21834764 40.55610916 -53.3125 31.37890625 C-53.77124042 21.27228144 -50.44140183 12.73026228 -43.9921875 5.0078125 C-31.84179811 -7.23787406 -14.78884778 -8.42204775 0 0 Z M-41.61328125 12.86328125 C-46.15524007 19.6570281 -45.90941269 27.10698416 -45 35 C-43.14636144 42.58901435 -38.4532245 48.15465051 -31.93359375 52.3203125 C-25.24706014 55.7413297 -18.58033061 56.13003777 -11.32421875 54.33984375 C-3.62019221 51.63934279 1.63248188 47.10055705 5.4375 39.875 C8.20112763 32.90636998 8.1785311 24.66059331 5.8125 17.5625 C1.4688809 9.02504176 -3.95359662 5.2182193 -13 2 C-24.20917594 0.17144743 -34.24041299 4.34788619 -41.61328125 12.86328125 Z " fill="#F6F602" transform="translate(83,255)"/>
<path d="M0 0 C1.20422104 -0.00241196 2.40844208 -0.00482391 3.64915466 -0.00730896 C6.19183652 -0.00633047 8.73453967 0.00706324 11.27709961 0.03198242 C15.17309735 0.06631376 19.06683041 0.05263301 22.96289062 0.03320312 C25.43360342 0.04010073 27.90431036 0.04977232 30.375 0.0625 C32.12509117 0.0550602 32.12509117 0.0550602 33.91053772 0.04747009 C35.53758888 0.07122459 35.53758888 0.07122459 37.19750977 0.09545898 C38.15061539 0.10165756 39.10372101 0.10785614 40.08570862 0.11424255 C43.38586832 0.78414961 44.58121043 1.99263544 46.62109375 4.62890625 C47.15234375 8.1953125 47.15234375 8.1953125 47.12109375 12.19140625 C47.14429688 13.19977539 47.14429688 13.19977539 47.16796875 14.22851562 C47.1291086 19.12003699 47.1291086 19.12003699 44.93359375 21.31924438 C42.11250737 22.9169392 40.3224648 23.00916741 37.08984375 23.01708984 C35.42791992 23.03127457 35.42791992 23.03127457 33.73242188 23.04574585 C32.54068359 23.03967316 31.34894531 23.03360046 30.12109375 23.02734375 C28.89326172 23.03021393 27.66542969 23.03308411 26.40039062 23.03604126 C23.80468281 23.03808256 21.20895963 23.03254818 18.61328125 23.02001953 C14.6363694 23.00396791 10.66047393 23.01986716 6.68359375 23.0390625 C4.16275817 23.03708008 1.64192322 23.03323644 -0.87890625 23.02734375 C-2.07064453 23.03341644 -3.26238281 23.03948914 -4.49023438 23.04574585 C-5.59818359 23.03628937 -6.70613281 23.02683289 -7.84765625 23.01708984 C-8.82154297 23.01470306 -9.79542969 23.01231628 -10.79882812 23.00985718 C-13.83429985 22.56166696 -15.20972238 21.77854051 -17.37890625 19.62890625 C-17.9453125 16.44921875 -17.9453125 16.44921875 -17.94140625 12.75390625 C-17.96332031 11.53960937 -17.98523438 10.3253125 -18.0078125 9.07421875 C-16.19842408 -0.83808302 -8.26602061 -0.0940949 0 0 Z " fill="#222121" transform="translate(465.37890625,282.37109375)"/>
<path d="M0 0 C6.00928514 1.21846294 11.7514865 2.79227193 17.53515625 4.8203125 C18.29928329 5.08383514 19.06341034 5.34735779 19.85069275 5.61886597 C22.25625285 6.44963638 24.65938662 7.28718191 27.0625 8.125 C28.70752565 8.69446312 30.3527067 9.26347754 31.99804688 9.83203125 C36.00051032 11.21618167 40.00081494 12.60640724 44 14 C44 14.33 44 14.66 44 15 C42.96359375 15.02578125 41.9271875 15.0515625 40.859375 15.078125 C39.48954199 15.13441951 38.11975195 15.19176655 36.75 15.25 C36.06808594 15.26417969 35.38617188 15.27835937 34.68359375 15.29296875 C31.5209013 15.44649751 29.29195399 15.82106046 26.578125 17.484375 C24.28348467 21.142168 24.18159191 24.75074934 24 29 C20.51964536 28.36046095 17.0409485 27.71232005 13.5625 27.0625 C12.56927734 26.88009766 11.57605469 26.69769531 10.55273438 26.50976562 C9.13637695 26.24389648 9.13637695 26.24389648 7.69140625 25.97265625 C6.81685791 25.81031494 5.94230957 25.64797363 5.04125977 25.48071289 C3 25 3 25 2 24 C1.85565201 22.64506343 1.77309516 21.28339476 1.71875 19.921875 C1.68136719 19.09042969 1.64398438 18.25898438 1.60546875 17.40234375 C1.57066406 16.52707031 1.53585937 15.65179688 1.5 14.75 C1.25314551 7.31560934 1.25314551 7.31560934 0 0 Z " fill="#E33733" transform="translate(424,268)"/>
<path d="M0 0 C1.11181641 -0.04511719 2.22363281 -0.09023437 3.36914062 -0.13671875 C9.03154751 -0.18365404 12.8909858 0.03053762 17.30078125 3.7890625 C18.50946649 5.03174351 19.68267219 6.31021286 20.8125 7.625 C21.3386792 8.21845215 21.8648584 8.8119043 22.40698242 9.42333984 C23.58049508 10.79192834 24.70327629 12.20380712 25.8125 13.625 C22.06276094 13.74122939 18.31348536 13.8122595 14.5625 13.875 C13.49902344 13.90851563 12.43554688 13.94203125 11.33984375 13.9765625 C10.31503906 13.98945313 9.29023438 14.00234375 8.234375 14.015625 C7.29174805 14.03657227 6.34912109 14.05751953 5.37792969 14.07910156 C2.07650824 13.49472358 1.04700526 12.03985841 -1.1875 9.625 C-4.4500342 8.9289772 -4.4500342 8.9289772 -7.9375 8.875 C-9.69320312 8.78992188 -9.69320312 8.78992188 -11.484375 8.703125 C-12.37640625 8.67734375 -13.2684375 8.6515625 -14.1875 8.625 C-14.875 6.3125 -14.875 6.3125 -15.1875 3.625 C-11.75649535 -1.3025145 -5.38560565 0.03068721 0 0 Z " fill="#202020" transform="translate(220.1875,184.375)"/>
<path d="M0 0 C3.27981751 2.06771104 4.84746007 3.77119011 7 7 C7.52406828 10.93051214 7.14790087 12.72532696 5.25 16.25 C2.0615021 20.14705298 0.53768833 20.83225218 -4.4375 21.375 C-8.62750939 20.93394638 -10.093893 19.98913863 -13 17 C-15.28647877 13.73360176 -15.54954056 10.92528971 -15 7 C-11.17104148 0.86512594 -7.1657157 -1.0177792 0 0 Z " fill="#FAFAFA" transform="translate(68,273)"/>
<path d="M0 0 C3.39890142 2.06889652 5.88937011 4.11279537 7 8 C6.80829763 13.27181513 5.74181444 16.25818556 2 20 C-1.60572704 21.20190901 -4.2102435 21.32670315 -8 21 C-11.4121353 18.87689359 -13.74948744 16.86522064 -15 13 C-15.45972376 9.97895814 -15.60025379 7.96174492 -13.94921875 5.31640625 C-9.81356643 0.22918791 -6.47372507 -0.90706704 0 0 Z " fill="#FAFAFA" transform="translate(388,273)"/>
</svg>`;

@Component({
  selector: 'app-animation',
  standalone: true,
  templateUrl: './animation.component.html',
})
export class AnimationComponent implements AfterViewInit, OnDestroy {
  @ViewChild('animationCanvas', { static: true }) canvas!: ElementRef<HTMLCanvasElement>;

  private ctx!: CanvasRenderingContext2D;
  private drivers: any[] = [];
  private trajectories = new Map<number, any[]>();
  private carImages = new Map<number, HTMLImageElement>();
  private trackTrajectory: any[] = []; // For drawing the track outline
  private allLocationData: any[] = []; // Store all location data from the API call

  private animationFrameId: number | null = null;
  private currentFrame = 0;
  private isPaused = false;

  private subscriptions: Subscription[] = [];

  // Zoom and Pan properties
  private zoom = 1;
  private panX = 0;
  private panY = 0;
  private isDragging = false;
  private lastMouseX = 0;
  private lastMouseY = 0;
  private minZoom = 0.1;
  private maxZoom = 5;

  // Configuration and timing
  private readonly MASS_QUERY_START_TIME = '2023-10-29T20:30:00+00:00';
  private showAllDrivers = true; // Flag to control number of drivers
  private singleDriverNumber = 1; // Driver to show when showAllDrivers is false
  
  // Time-based animation properties
  private sessionStartTime: Date | null = null;
  private sessionEndTime: Date | null = null;
  private raceStartTime: Date | null = null; // Actual race start time
  private currentSimulationTime: Date | null = null;
  private lastUpdateTime: number = 0;
  private speedMultiplier: number = 10;

  constructor(
    private openf1ApiService: Openf1ApiService,
    private animationControlService: AnimationControlService
  ) {
    // Initialize speed multiplier from the service
    this.speedMultiplier = this.animationControlService.getSpeedMultiplier();
  }

  ngAfterViewInit(): void {
    const canvasEl = this.canvas.nativeElement;
    const context = canvasEl.getContext('2d');
    if (!context) {
      throw new Error('Could not get canvas context');
    }
    this.ctx = context;
    
    // Setup responsive canvas
    this.setupResponsiveCanvas();
    this.setupCanvasEventListeners();
    
    this.loadAllDriverData();

    this.subscriptions.push(
      this.animationControlService.start$.subscribe(() => this.startAnimation()),
      this.animationControlService.pause$.subscribe(() => this.pauseAnimation()),
      this.animationControlService.stop$.subscribe(() => this.stopAnimation()),
      this.animationControlService.toggleShowAllDrivers$.subscribe(() => this.toggleShowAllDrivers()),
      this.animationControlService.speedChanged$.subscribe((speed) => this.onSpeedChanged(speed)),
      this.animationControlService.timeSeek$.subscribe((time) => this.seekToTime(time)),
      this.animationControlService.jumpToRaceStart$.subscribe(() => this.jumpToRaceStart()),
      this.animationControlService.speedMultiplier$.subscribe((speed) => {
        this.speedMultiplier = speed;
      }),
      this.animationControlService.sessionChanged$.subscribe(() => {
        this.drivers = [];
        this.trajectories.clear();
        this.carImages.clear();
        this.trackTrajectory = [];
        this.sessionStartTime = null;
        this.sessionEndTime = null;
        this.raceStartTime = null;
        this.currentSimulationTime = null;
        this.stopAnimation();
        this.loadAllDriverData();
      })
    );
  }

  ngOnDestroy(): void {
    this.subscriptions.forEach(sub => sub.unsubscribe());
    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
    }
    
    // Clean up canvas event listeners
    const canvas = this.canvas.nativeElement;
    if (canvas) {
      canvas.removeEventListener('wheel', () => {});
      canvas.removeEventListener('mousedown', () => {});
      canvas.removeEventListener('mousemove', () => {});
      canvas.removeEventListener('mouseup', () => {});
      canvas.removeEventListener('mouseleave', () => {});
    }
  }

  public toggleShowAllDrivers(): void {
    this.showAllDrivers = !this.showAllDrivers;
    this.drivers = [];
    this.trajectories.clear();
    this.carImages.clear();
    this.trackTrajectory = [];
    this.stopAnimation();
    this.loadAllDriverData();
  }

  loadAllDriverData(): void {
    // First get session timing information
    this.openf1ApiService.getSessionTimeBounds().subscribe(bounds => {
      this.sessionStartTime = bounds.startTime;
      this.sessionEndTime = bounds.endTime;
      this.currentSimulationTime = new Date(bounds.startTime);
      // Ensure the animation control service is immediately updated with the start time
      this.animationControlService.setCurrentTime(this.currentSimulationTime);
    });

    this.openf1ApiService.getDrivers().pipe(
      switchMap(drivers => {
        if (this.showAllDrivers) {
          this.drivers = drivers;
        } else {
          const singleDriver = drivers.find(d => d.driver_number === this.singleDriverNumber);
          this.drivers = singleDriver ? [singleDriver] : [];
        }

        if (this.drivers.length === 0) {
          return of([]);
        }

        // Use the new single API call to get ALL drivers' location data
        return this.openf1ApiService.getAllDriversLocationData();
      })
    ).subscribe(allLocationData => {
      if (allLocationData.length === 0) {
        return;
      }

      console.log(`📊 Processing ${allLocationData.length} location data points from first 5 minutes`);

      // Store all location data for track drawing and simulation
      this.allLocationData = allLocationData;

      // Group location data by driver and filter for our drivers
      this.drivers.forEach(driver => {
        const driverLocations = allLocationData
          .filter(loc => loc.driver_number === driver.driver_number)
          .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
        
        this.trajectories.set(driver.driver_number, driverLocations);
        
        console.log(`🏎️ Driver ${driver.driver_number} (${driver.name_acronym || driver.broadcast_name}): ${driverLocations.length} location points`);
      });

      // Use the first available driver's trajectory for track outline
      if (this.drivers.length > 0) {
        const firstDriverTrajectory = this.trajectories.get(this.drivers[0].driver_number);
        if (firstDriverTrajectory && firstDriverTrajectory.length > 0) {
          this.trackTrajectory = firstDriverTrajectory;
          console.log(`🏁 Using driver ${this.drivers[0].driver_number} trajectory for track outline (${firstDriverTrajectory.length} points)`);
          this.drawTrack();
        }
      }

      const imageLoadPromises = this.drivers.map(driver => {
        return new Promise<void>(resolve => {
            // Replace the #E43834 color with the team color
            const teamColor = driver.car_color || '#E43834';
            const coloredSvg = CAR_SVG.replace(/#E43834/g, teamColor);
            const blob = new Blob([coloredSvg], { type: 'image/svg+xml' });
            const url = URL.createObjectURL(blob);
            const image = new Image();
            image.src = url;
            image.onload = () => {
                this.carImages.set(driver.driver_number, image);
                URL.revokeObjectURL(url);
                resolve();
            };
        });
      });

      Promise.all(imageLoadPromises).then(() => {
        console.log('All car images loaded');
        
        // Detect race start time
        this.detectRaceStartTime();
        
        // Update cars at the initial time
        this.updateCarsAtCurrentTime();
        // Make sure the time display shows the start time
        if (this.currentSimulationTime) {
          this.animationControlService.setCurrentTime(this.currentSimulationTime);
        }
      });
    });
  }

  private detectRaceStartTime(): void {
    if (this.trajectories.size === 0) return;

    // Get the first driver's trajectory to analyze
    const firstDriverTrajectory = Array.from(this.trajectories.values())[0];
    if (!firstDriverTrajectory || firstDriverTrajectory.length < 10) return;

    // Look for significant movement indicating race start
    let raceStartDetected = false;
    const minimumMovement = 100; // meters - threshold for significant movement
    const consistentPoints = 3; // Number of consecutive points with good movement

    for (let i = 5; i < firstDriverTrajectory.length - consistentPoints; i++) {
      let consistentMovement = 0;
      
      // Check for consecutive points with significant movement
      for (let j = 0; j < consistentPoints; j++) {
        const currentPoint = firstDriverTrajectory[i + j];
        const prevPoint = firstDriverTrajectory[i + j - 1];
        
        if (currentPoint && prevPoint) {
          // Calculate distance moved between points
          const deltaX = currentPoint.x - prevPoint.x;
          const deltaY = currentPoint.y - prevPoint.y;
          const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
          
          // Check if speed is available and above threshold, or distance moved is significant
          const hasSpeed = currentPoint.speed && currentPoint.speed > 50; // 50 km/h
          const hasMovement = distance > minimumMovement;
          
          if (hasSpeed || hasMovement) {
            consistentMovement++;
          }
        }
      }

      // If we found consistent racing activity, this might be race start
      if (consistentMovement >= consistentPoints) {
        this.raceStartTime = new Date(firstDriverTrajectory[i].date);
        raceStartDetected = true;
        console.log('Race start detected at:', this.raceStartTime);
        break;
      }
    }

    // Fallback: if no clear race start detected, look for first significant activity
    if (!raceStartDetected) {
      // Find first point where there's any meaningful movement
      for (let i = 1; i < Math.min(firstDriverTrajectory.length, 100); i++) {
        const currentPoint = firstDriverTrajectory[i];
        const prevPoint = firstDriverTrajectory[i - 1];
        
        const deltaX = currentPoint.x - prevPoint.x;
        const deltaY = currentPoint.y - prevPoint.y;
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        
        if (distance > 50) { // Any movement > 50 meters
          this.raceStartTime = new Date(currentPoint.date);
          console.log('First movement detected at:', this.raceStartTime);
          break;
        }
      }
    }

    // Final fallback: use session start + 5 minutes
    if (!this.raceStartTime && this.sessionStartTime) {
      this.raceStartTime = new Date(this.sessionStartTime.getTime() + (5 * 60 * 1000));
      console.log('Race start estimated at:', this.raceStartTime);
    }
  }

  startAnimation(): void {
    console.log('🚀 startAnimation() called, current state:', {
      hasAnimationFrame: !!this.animationFrameId,
      hasSessionStart: !!this.sessionStartTime,
      currentTime: this.currentSimulationTime?.toISOString(),
      raceStartTime: this.raceStartTime?.toISOString()
    });

    if (this.animationFrameId || !this.sessionStartTime) {
      return;
    }

    // Only jump to race start time if we're at the very beginning (session start)
    // This prevents restarting when resuming from pause
    if (this.raceStartTime && this.currentSimulationTime) {
      const sessionStartDiff = Math.abs(this.currentSimulationTime.getTime() - this.sessionStartTime.getTime());
      console.log('⏰ Time check:', {
        sessionStartDiff: sessionStartDiff,
        isAtSessionStart: sessionStartDiff <= 30000
      });
      
      // Only jump to race start if we're at session start (within 30 seconds)
      if (sessionStartDiff <= 30000) {
        const timeDiff = Math.abs(this.currentSimulationTime.getTime() - this.raceStartTime.getTime());
        // If we're more than 1 minute away from race start, jump to race start
        if (timeDiff > 60000) {
          this.currentSimulationTime = new Date(this.raceStartTime);
          this.animationControlService.setCurrentTime(this.currentSimulationTime);
          this.updateCarsAtCurrentTime();
          console.log('🏁 Jumped to race start time:', this.currentSimulationTime);
        }
      } else {
        console.log('▶️ Resuming from current time (not jumping to race start)');
      }
    }

    this.isPaused = false;
    this.lastUpdateTime = performance.now();
    this.animate();
  }

  pauseAnimation(): void {
    console.log('⏸️ pauseAnimation() called');
    this.isPaused = true;
    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
  }

  stopAnimation(): void {
    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
    if (this.sessionStartTime) {
      this.currentSimulationTime = new Date(this.sessionStartTime);
      this.animationControlService.setCurrentTime(this.currentSimulationTime);
      this.updateCarsAtCurrentTime();
    }
    
    // Reset dynamic data loading by clearing API service segments
    // This ensures a fresh start when restarting the simulation
    this.clearDynamicDataAndReload();
    
    this.drawTrack();
  }

  onSpeedChanged(speed: number): void {
    this.speedMultiplier = speed;
  }

  seekToTime(targetTime: Date): void {
    this.currentSimulationTime = new Date(targetTime);
    this.animationControlService.setCurrentTime(this.currentSimulationTime);
    this.updateCarsAtCurrentTime();
  }

  jumpToRaceStart(): void {
    if (this.raceStartTime) {
      this.currentSimulationTime = new Date(this.raceStartTime);
      this.animationControlService.setCurrentTime(this.currentSimulationTime);
      this.updateCarsAtCurrentTime();
      console.log('Jumped to race start time:', this.currentSimulationTime);
    } else {
      console.log('Race start time not detected yet');
    }
  }

  private animate(): void {
    if (this.isPaused) {
      if (this.animationFrameId) {
        cancelAnimationFrame(this.animationFrameId);
        this.animationFrameId = null;
      }
      return;
    }

    if (!this.currentSimulationTime || !this.sessionEndTime) {
      return;
    }

    const now = performance.now();
    const deltaTime = now - this.lastUpdateTime;
    this.lastUpdateTime = now;

    // Calculate how much simulation time has passed
    const simulationDelta = deltaTime * this.speedMultiplier;
    this.currentSimulationTime = new Date(this.currentSimulationTime.getTime() + simulationDelta);

    // Check if we've reached the end of the session
    if (this.currentSimulationTime >= this.sessionEndTime) {
      this.currentSimulationTime = new Date(this.sessionEndTime);
      this.animationControlService.setCurrentTime(this.currentSimulationTime);
      this.updateCarsAtCurrentTime();
      this.stopAnimation();
      return;
    }

    // Update the control service with current time
    this.animationControlService.setCurrentTime(this.currentSimulationTime);

    // Check if we need to load more data dynamically
    this.checkAndLoadMoreDataIfNeeded();

    // Draw the current frame
    this.drawTrack();
    this.updateCarsAtCurrentTime();

    this.animationFrameId = requestAnimationFrame(() => this.animate());
  }

  private checkAndLoadMoreDataIfNeeded(): void {
    if (!this.currentSimulationTime) return;

    // Use the API service to check and load more data
    this.openf1ApiService.checkAndLoadMoreData(this.currentSimulationTime)
      .subscribe(updatedData => {
        if (updatedData.length > this.allLocationData.length) {
          console.log(`🔄 Loaded additional data: ${updatedData.length - this.allLocationData.length} new points`);
          console.log(`📊 Total simulation coverage: ${(updatedData.length / 1000).toFixed(1)}k data points`);
          
          // Update our stored data
          this.allLocationData = updatedData;

          // Update trajectories for each driver with new data
          this.drivers.forEach(driver => {
            const driverLocations = updatedData
              .filter(loc => loc.driver_number === driver.driver_number)
              .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
            
            this.trajectories.set(driver.driver_number, driverLocations);
            
            console.log(`🏎️ Updated driver ${driver.driver_number}: ${driverLocations.length} total points`);
          });

          // Update track trajectory if needed (use first driver's updated trajectory)
          if (this.drivers.length > 0) {
            const firstDriverTrajectory = this.trajectories.get(this.drivers[0].driver_number);
            if (firstDriverTrajectory && firstDriverTrajectory.length > 0) {
              this.trackTrajectory = firstDriverTrajectory;
            }
          }
        }
      });
  }

  private clearDynamicDataAndReload(): void {
    // Clear the API service's loaded segments
    this.openf1ApiService.clearLoadedSegments();
    
    // Reload the first chunk of data to reset trajectories
    this.openf1ApiService.getAllDriversLocationData().subscribe(allLocationData => {
      if (allLocationData.length === 0) {
        return;
      }

      console.log(`🔄 Reloaded initial data: ${allLocationData.length} location points after restart`);

      // Store all location data for track drawing and simulation
      this.allLocationData = allLocationData;

      // Update trajectories for each driver
      this.drivers.forEach(driver => {
        const driverLocations = allLocationData
          .filter(loc => loc.driver_number === driver.driver_number)
          .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
        
        this.trajectories.set(driver.driver_number, driverLocations);
        
        console.log(`🏎️ Reset driver ${driver.driver_number}: ${driverLocations.length} location points`);
      });

      // Reset track trajectory
      if (this.drivers.length > 0) {
        const firstDriverTrajectory = this.trajectories.get(this.drivers[0].driver_number);
        if (firstDriverTrajectory && firstDriverTrajectory.length > 0) {
          this.trackTrajectory = firstDriverTrajectory;
        }
      }
    });
  }

  private updateCarsAtCurrentTime(): void {
    if (!this.currentSimulationTime) return;

    this.drivers.forEach(driver => {
      const driverTrajectory = this.trajectories.get(driver.driver_number);
      if (driverTrajectory && driverTrajectory.length > 0) {
        const position = this.findPositionAtTime(driverTrajectory, this.currentSimulationTime!);
        if (position) {
          this.drawCar(position, driver.driver_number);
        }
      }
    });
  }

  private findPositionAtTime(trajectory: any[], targetTime: Date): any | null {
    if (trajectory.length === 0) return null;

    const targetTimestamp = targetTime.getTime();

    // Find the closest position by timestamp
    let closestIndex = 0;
    let closestDiff = Math.abs(new Date(trajectory[0].date).getTime() - targetTimestamp);

    for (let i = 1; i < trajectory.length; i++) {
      const diff = Math.abs(new Date(trajectory[i].date).getTime() - targetTimestamp);
      if (diff < closestDiff) {
        closestDiff = diff;
        closestIndex = i;
      } else {
        // Since trajectory is sorted, we can break early if diff starts increasing
        break;
      }
    }

    return trajectory[closestIndex];
  }

  private setupResponsiveCanvas(): void {
    this.resizeCanvas();
  }

  private resizeCanvas(): void {
    const canvas = this.canvas.nativeElement;
    const container = canvas.parentElement;
    if (container) {
      const containerWidth = container.clientWidth;
      const containerHeight = container.clientHeight || Math.min(containerWidth * 0.6, 600);
      
      canvas.width = containerWidth;
      canvas.height = containerHeight;
      
      // Redraw after resize
      if (this.trackTrajectory.length > 0) {
        this.drawTrack();
      }
    }
  }

  private setupCanvasEventListeners(): void {
    const canvas = this.canvas.nativeElement;
    
    // Mouse wheel for zoom
    canvas.addEventListener('wheel', (e) => {
      e.preventDefault();
      const rect = canvas.getBoundingClientRect();
      const mouseX = e.clientX - rect.left;
      const mouseY = e.clientY - rect.top;
      
      const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
      const newZoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.zoom * zoomFactor));
      
      if (newZoom !== this.zoom) {
        // Zoom towards mouse position
        const worldX = (mouseX - this.panX) / this.zoom;
        const worldY = (mouseY - this.panY) / this.zoom;
        
        this.zoom = newZoom;
        
        this.panX = mouseX - worldX * this.zoom;
        this.panY = mouseY - worldY * this.zoom;
        
        this.drawTrack();
      }
    });

    // Mouse down for pan start
    canvas.addEventListener('mousedown', (e) => {
      this.isDragging = true;
      this.lastMouseX = e.clientX;
      this.lastMouseY = e.clientY;
      canvas.style.cursor = 'grabbing';
    });

    // Mouse move for pan
    canvas.addEventListener('mousemove', (e) => {
      if (this.isDragging) {
        const deltaX = e.clientX - this.lastMouseX;
        const deltaY = e.clientY - this.lastMouseY;
        
        this.panX += deltaX;
        this.panY += deltaY;
        
        this.lastMouseX = e.clientX;
        this.lastMouseY = e.clientY;
        
        this.drawTrack();
      }
    });

    // Mouse up for pan end
    canvas.addEventListener('mouseup', () => {
      this.isDragging = false;
      canvas.style.cursor = 'grab';
    });

    // Mouse leave to stop dragging
    canvas.addEventListener('mouseleave', () => {
      this.isDragging = false;
      canvas.style.cursor = 'default';
    });

    // Set initial cursor
    canvas.style.cursor = 'grab';
  }

  @HostListener('window:resize')
  onWindowResize(): void {
    this.resizeCanvas();
  }

  // Zoom control methods
  public zoomIn(): void {
    const newZoom = Math.min(this.maxZoom, this.zoom * 1.2);
    if (newZoom !== this.zoom) {
      const canvas = this.canvas.nativeElement;
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      
      const worldX = (centerX - this.panX) / this.zoom;
      const worldY = (centerY - this.panY) / this.zoom;
      
      this.zoom = newZoom;
      
      this.panX = centerX - worldX * this.zoom;
      this.panY = centerY - worldY * this.zoom;
      
      this.drawTrack();
    }
  }

  public zoomOut(): void {
    const newZoom = Math.max(this.minZoom, this.zoom * 0.8);
    if (newZoom !== this.zoom) {
      const canvas = this.canvas.nativeElement;
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      
      const worldX = (centerX - this.panX) / this.zoom;
      const worldY = (centerY - this.panY) / this.zoom;
      
      this.zoom = newZoom;
      
      this.panX = centerX - worldX * this.zoom;
      this.panY = centerY - worldY * this.zoom;
      
      this.drawTrack();
    }
  }

  public resetZoom(): void {
    this.zoom = 1;
    this.panX = 0;
    this.panY = 0;
    this.drawTrack();
  }

  private getScaleAndOffset() {
    if (this.trackTrajectory.length === 0) {
        return { scale: 1, offsetX: 0, offsetY: 0 };
    }
    const xCoords = this.trackTrajectory.map(d => d.x);
    const yCoords = this.trackTrajectory.map(d => d.y);

    const minX = Math.min(...xCoords);
    const maxX = Math.max(...xCoords);
    const minY = Math.min(...yCoords);
    const maxY = Math.max(...yCoords);

    const canvasWidth = this.canvas.nativeElement.width;
    const canvasHeight = this.canvas.nativeElement.height;

    const scaleX = canvasWidth / (maxX - minX);
    const scaleY = canvasHeight / (maxY - minY);
    const baseScale = Math.min(scaleX, scaleY) * 0.9;

    // Apply zoom
    const scale = baseScale * this.zoom;

    // Calculate base offset for centering, then apply pan
    const baseOffsetX = (canvasWidth - (maxX - minX) * baseScale) / 2 - minX * baseScale;
    const baseOffsetY = (canvasHeight - (maxY - minY) * baseScale) / 2 - minY * baseScale;
    
    const offsetX = baseOffsetX * this.zoom + this.panX;
    const offsetY = baseOffsetY * this.zoom + this.panY;

    return { scale, offsetX, offsetY };
  }

  drawTrack(): void {
    this.ctx.clearRect(0, 0, this.canvas.nativeElement.width, this.canvas.nativeElement.height);
    if (this.trackTrajectory.length === 0) return;

    const { scale, offsetX, offsetY } = this.getScaleAndOffset();

    this.ctx.beginPath();
    this.ctx.strokeStyle = 'black';
    // Scale line width with zoom (minimum 1px, maximum 6px)
    this.ctx.lineWidth = Math.max(1, Math.min(6, 2 * this.zoom));

    this.trackTrajectory.forEach((p, index) => {
      const x = p.x * scale + offsetX;
      const y = p.y * scale + offsetY;
      if (index === 0) {
        this.ctx.moveTo(x, y);
      } else {
        this.ctx.lineTo(x, y);
      }
    });
    this.ctx.stroke();

    // Redraw cars at current time position after drawing track
    this.updateCarsAtCurrentTime();
  }

  drawCar(position: any, driverNumber: number): void {
    const carImage = this.carImages.get(driverNumber);
    if (!carImage) return;

    const { scale, offsetX, offsetY } = this.getScaleAndOffset();
    const x = position.x * scale + offsetX;
    const y = position.y * scale + offsetY;

    // Find the driver to get team color
    const driver = this.drivers.find(d => d.driver_number === driverNumber);
    const teamColor = driver?.car_color || '#E43834';

    // Calculate scaled sizes based on zoom level
    const baseCarSize = 24;
    const baseCircleRadius = 8;
    const baseCircleOffset = 10;
    const baseFontSize = 8;
    
    const carSize = Math.max(12, Math.min(48, baseCarSize * this.zoom));
    const circleRadius = Math.max(4, Math.min(16, baseCircleRadius * this.zoom));
    const circleOffset = Math.max(5, Math.min(20, baseCircleOffset * this.zoom));
    const fontSize = Math.max(6, Math.min(16, baseFontSize * this.zoom));

    // Calculate car rotation based on movement direction using time-based approach
    const driverTrajectory = this.trajectories.get(driverNumber);
    let rotation = 0;
    
    if (driverTrajectory && this.currentSimulationTime) {
      // Find previous position to calculate direction
      const currentTime = this.currentSimulationTime.getTime();
      const prevTime = currentTime - 1000; // Look back 1 second
      const prevPosition = this.findPositionAtTime(driverTrajectory, new Date(prevTime));
      
      if (prevPosition && (position.x !== prevPosition.x || position.y !== prevPosition.y)) {
        const deltaX = position.x - prevPosition.x;
        const deltaY = position.y - prevPosition.y;
        rotation = Math.atan2(deltaY, deltaX);
      }
    }

    // Save current context state
    this.ctx.save();
    
    // Translate to car position and rotate
    this.ctx.translate(x, y);
    this.ctx.rotate(rotation);
    
    // Draw the car image (centered at origin after translation) with scaled size
    const halfCarSize = carSize / 2;
    this.ctx.drawImage(carImage, -halfCarSize, -halfCarSize, carSize, carSize);
    
    // Restore context to draw circle and text in normal orientation
    this.ctx.restore();

    // Draw a colored circle for the team instead of the team SVG with scaled size
    this.ctx.beginPath();
    this.ctx.arc(x + circleOffset, y - circleOffset, circleRadius, 0, 2 * Math.PI);
    this.ctx.fillStyle = teamColor;
    this.ctx.fill();
    this.ctx.strokeStyle = 'white';
    this.ctx.lineWidth = Math.max(1, Math.min(3, 1 * this.zoom));
    this.ctx.stroke();

    // Draw driver number in the circle with scaled font
    this.ctx.fillStyle = 'white';
    this.ctx.font = `bold ${fontSize}px Arial`;
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';
    this.ctx.fillText(String(driverNumber), x + circleOffset, y - circleOffset);

    // Reset text baseline for other text
    this.ctx.textBaseline = 'alphabetic';
  }
}